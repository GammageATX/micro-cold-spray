openapi: 3.0.0
info:
  title: Micro Cold Spray API
  description: API documentation for the Micro Cold Spray system
  version: 1.0.0
  contact:
    name: Support Team

servers:
- url: http://localhost:8000
  description: UI Service
- url: http://localhost:8001
  description: Config Service
- url: http://localhost:8002
  description: State Service
- url: http://localhost:8003
  description: Communication Service
- url: http://localhost:8004
  description: Process Service
- url: http://localhost:8005
  description: Data Collection Service
- url: http://localhost:8006
  description: Validation Service

components:
  schemas:
    HealthResponse:
      type: object
      required:
      - status
      - service_name
      - version
      - is_running
      - uptime
      - memory_usage
      - timestamp
      properties:
        status:
          type: string
          description: Service status (ok or error)
          enum: [ ok, error ]
        service_name:
          type: string
          description: Name of the service
        version:
          type: string
          description: Service version
        is_running:
          type: boolean
          description: Whether service is running
        uptime:
          type: number
          format: float
          description: Service uptime in seconds
        memory_usage:
          type: object
          description: Memory usage statistics
          additionalProperties:
            type: number
        error:
          type: string
          nullable: true
          description: Error message if any
        timestamp:
          type: string
          format: date-time
          description: Response timestamp

    ConfigRequest:
      type: object
      required:
      - name
      - data
      - format
      properties:
        name:
          type: string
          description: Configuration name
        data:
          type: object
          description: Configuration data
        format:
          type: string
          description: Data format (yaml/json)
          enum: [ yaml, json ]

    ConfigResponse:
      type: object
      required:
      - name
      - data
      - format
      properties:
        name:
          type: string
          description: Configuration name
        data:
          type: object
          description: Configuration data
        format:
          type: string
          description: Data format (yaml/json)

    SchemaRequest:
      type: object
      required:
      - name
      - schema_definition
      properties:
        name:
          type: string
          description: Schema name
        schema_definition:
          type: object
          description: JSON Schema definition

    SchemaResponse:
      type: object
      required:
      - name
      - schema_definition
      properties:
        name:
          type: string
          description: Schema name
        schema_definition:
          type: object
          description: JSON Schema definition

    MessageResponse:
      type: object
      required:
      - message
      properties:
        message:
          type: string
          description: Response message

    SprayEvent:
      type: object
      required:
      - sequence_id
      - timestamp
      - data
      properties:
        sequence_id:
          type: string
          description: Sequence ID
        timestamp:
          type: string
          format: date-time
          description: Event timestamp
        data:
          type: object
          description: Event data
          additionalProperties: true

paths:
  /health:
    get:
      summary: Service Health Check
      description: Check the health status of the service
      operationId: healthCheck
      tags: [ Health ]
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '503':
          description: Service unavailable

  /monitoring/services/status:
    get:
      summary: Get Services Status
      description: Get status of all services
      operationId: getServicesStatus
      tags: [ Monitoring ]
      responses:
        '200':
          description: Services status
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    name:
                      type: string
                    port:
                      type: integer
                    status:
                      type: string
                      enum: [ ok, error ]
                    uptime:
                      type: number
                    service_info:
                      $ref: '#/components/schemas/HealthResponse'
        '500':
          description: Internal server error

  /config/{name}:
    get:
      summary: Get Configuration
      description: Get configuration by name
      operationId: getConfig
      tags: [ Config ]
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Configuration details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
        '500':
          description: Internal server error
    put:
      summary: Update Configuration
      description: Update configuration
      operationId: updateConfig
      tags: [ Config ]
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigRequest'
      responses:
        '200':
          description: Configuration updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error

  /config/validate/{name}:
    post:
      summary: Validate Configuration
      description: Validate configuration against schema
      operationId: validateConfig
      tags: [ Config ]
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfigRequest'
      responses:
        '200':
          description: Configuration validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '422':
          description: Validation failed

  /config/schema/{name}:
    get:
      summary: Get Schema
      description: Get schema by name
      operationId: getSchema
      tags: [ Config ]
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Schema details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaResponse'
        '404':
          description: Schema not found
        '500':
          description: Internal server error
    put:
      summary: Update Schema
      description: Update schema
      operationId: updateSchema
      tags: [ Config ]
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchemaRequest'
      responses:
        '200':
          description: Schema updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error

  /start:
    post:
      summary: Start State Service
      description: Start the state service
      operationId: startStateService
      tags: [ State ]
      responses:
        '200':
          description: Service started
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ started ]

  /stop:
    post:
      summary: Stop State Service
      description: Stop the state service
      operationId: stopStateService
      tags: [ State ]
      responses:
        '200':
          description: Service stopped
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [ stopped ]

  /state:
    get:
      summary: Get Current State
      description: Get current state of the system
      operationId: getCurrentState
      tags: [ State ]
      responses:
        '200':
          description: Current state
          content:
            application/json:
              schema:
                type: object
                properties:
                  state:
                    type: string
                  timestamp:
                    type: string
                    format: date-time

  /transitions:
    get:
      summary: Get Valid Transitions
      description: Get valid state transitions
      operationId: getValidTransitions
      tags: [ State ]
      responses:
        '200':
          description: Valid transitions
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string

  /transition/{new_state}:
    post:
      summary: Transition State
      description: Transition to new state
      operationId: transitionState
      tags: [ State ]
      parameters:
      - name: new_state
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: State transition result

  /history:
    get:
      summary: Get State History
      description: Get state transition history
      operationId: getStateHistory
      tags: [ State ]
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: State history
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    state:
                      type: string
                    timestamp:
                      type: string
                      format: date-time

  /equipment/health:
    get:
      summary: Check Equipment Health
      description: Check equipment service health
      operationId: checkEquipmentHealth
      tags: [ Equipment ]
      responses:
        '200':
          description: Equipment health status
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
        '503':
          description: Service unavailable

  /equipment/gas/{action}:
    post:
      summary: Control Gas System
      description: Control gas system (on/off)
      operationId: controlGas
      tags: [ Equipment ]
      parameters:
      - name: action
        in: path
        required: true
        schema:
          type: string
          enum: [ on, off ]
      responses:
        '200':
          description: Gas control result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Invalid action
        '500':
          description: Internal server error

  /validation/hardware:
    post:
      summary: Validate Hardware Configuration
      description: Validate hardware configuration
      operationId: validateHardware
      tags: [ Validation ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  errors:
                    type: array
                    items:
                      type: string
                  warnings:
                    type: array
                    items:
                      type: string
        '422':
          description: Validation failed

  /validation/parameter/{parameter_type}:
    post:
      summary: Validate Parameter Configuration
      description: Validate parameter configuration
      operationId: validateParameter
      tags: [ Validation ]
      parameters:
      - name: parameter_type
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '200':
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  errors:
                    type: array
                    items:
                      type: string
                  warnings:
                    type: array
                    items:
                      type: string
        '422':
          description: Validation failed

  /data_collection/data/stop:
    post:
      summary: Stop Data Collection
      description: Stop current data collection
      operationId: stopDataCollection
      tags: [ Data Collection ]
      responses:
        '200':
          description: Data collection stopped
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error

  /data_collection/data/record:
    post:
      summary: Record Spray Event
      description: Record a spray event
      operationId: recordSprayEvent
      tags: [ Data Collection ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SprayEvent'
      responses:
        '200':
          description: Event recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '500':
          description: Internal server error

  /data_collection/data/{sequence_id}:
    get:
      summary: Get Sequence Events
      description: Get all events for a sequence
      operationId: getSequenceEvents
      tags: [ Data Collection ]
      parameters:
      - name: sequence_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Sequence events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SprayEvent'
        '500':
          description: Internal server error
