# Project Architecture Rules

## Core Principles
- Single Source of Truth (SSOT):
  - TagManager: Only component that uses hardware clients
  - ConfigManager: Handles all configurations
  - MessageBroker: Controls all pub/sub messaging
  - UIUpdateManager: Manages all UI updates
  - StateManager: Manages all system state

## Python Environment Requirements
1. Virtual Environment:
   - Must use venv for isolation
   - Must be named .venv
   - Must be excluded from git
   - Must install all dependencies from requirements.txt

2. Package Management:
   - Must use requirements.txt for dependencies
   - Must use setup.py for development installation
   - Must use pip install -e . for local development
   - Must specify version constraints

3. Dependencies:
   - Core dependencies must be explicitly versioned
   - Development tools must be in separate section
   - Must document purpose of each dependency
   - Must maintain minimum Python version compatibility

## Message Patterns
1. Tag Operations:
   - Must use "tag/set" for setting values
   - Must use "tag/get" for requesting values
   - Must use "tag/update" for receiving updates
   - Must use "tag/get/response" for get responses
   - Must use "error" for operation errors

2. State Operations:
   - Must use "state/request" for requesting state changes
   - Must use "state/change" for observing state updates
   - Must use "state/error" for state operation errors
   - Must get state directly from StateManager
   - Must not store state in tags

3. Config Operations:
   - Must use "config/update/*" for updates
   - Must use "config/update/response" for responses
   - Must publish all runtime changes

4. Error Handling:
   - Must publish all errors to "error" topic
   - Must include error context
   - Must include source topic
   - Must include timestamp

## UI Component Rules
1. Widget Requirements:
   - Must register with UIUpdateManager
   - Must implement update() method
   - Must handle async operations
   - Must cleanup on destroy

2. Frame Style Constants:
   - Must use QFrame.Shape.* for frame shapes
   - Must use QFrame.Shadow.* for frame shadows
   - Must use proper Qt6 enum classes

3. Alignment Constants:
   - Must use Qt.AlignmentFlag.* for alignments
   - No direct use of Qt5-style constants

4. Size Policy Constants:
   - Must use QSizePolicy.Policy.* for size policies
   - Must use proper enum classes

## Testing Standards
1. Test Requirements:
   - Must use pytest framework
   - Must use pytest-asyncio for async tests
   - Must use pytest-qt for UI tests
   - Must maintain test coverage standards

2. Test Fixtures:
   - Must initialize required message topics
   - Must provide proper cleanup
   - Must handle async operations
   - Must mock hardware clients

3. Test Patterns:
   - Must test error conditions
   - Must verify message publishing
   - Must check state transitions
   - Must validate UI updates

## Error Handling Rules
1. Required Checks:
   - All MessageBroker operations
   - All cleanup chains
   - All widget references
   - All manager references

2. Async Requirements:
   - All cleanup methods
   - All UI update handlers
   - All message operations
   - All hardware operations

3. Error Logging:
   - All exceptions must be caught and logged
   - All error messages must be descriptive
   - All error handlers must include context

## Monitor Rules
1. Monitor Requirements:
   - Must use MessageBroker for all communication
   - Must not access hardware directly
   - Must handle connection loss gracefully
   - Must publish status updates

2. Status Updates:
   - Must include timestamps
   - Must use standardized topics
   - Must handle errors properly
   - Must publish error context

3. Monitor Topics:
   - Must use "hardware/status/*" for hardware
   - Must use "process/status/*" for process
   - Must use "state/change" for state
   - Must use "*/error" for errors
